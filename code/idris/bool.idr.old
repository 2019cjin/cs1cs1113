
-- total functions
-- block comments
-- symbolic arguments
-- pattern matching: any argument

module bool

import pair

data bool = true | false

id: bool -> bool
id b = b

constFalse: bool -> bool
constFalse _ = false

constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true

-- HOMEWORK

--given a pair of bool values (a , b), return true if both a and b are true,
--otherwise return false

andp: pair bool bool -> bool
andp (mkPair true true) = true
andp _ = false

--given a pair of bool values (a, b), return false if both a and b are false,
--otherwise return true

orp: pair bool bool -> bool
orp (mkPair false false) = false
orp _ = true

--short for "not and", given a pair of bool values (a, b), return false if
--both a and b are true, and true otherwise

nandp: pair bool bool -> bool
nandp (mkPair a b) = not (andp (mkPair a b))

--short for "exclusive or", given a pair of bool values (a, b), return true if
--exactly one of a or b is true, and false otherwise

xorp: pair bool bool -> bool
xorp (mkPair true false) = true
xorp (mkPair false true) = true
xorp _ = false

-- Exam 1

{-Exam problem #2: There are 16 possible ways to fill in the result column for
the truth table for a binary Boolean function, and therefore there are thus
exactly 16 such functions, and no more.
-}

-- Question 4a
pand: bool -> (bool -> bool)
pand true = bool.id
pand false = constFalse

-- Question 4b, 4c, 4d
por: bool -> bool -> bool
por true = constTrue
por false = bool.id

pxor: bool -> (bool -> bool)
pxor true = not
pxor false = bool.id

pnand: bool -> (bool -> bool)
pnand true = not
pnand false = constTrue

-- binary function (bool -> bool -> bool), implicit

and: bool -> bool -> bool
and true true = true
and _ _ = false

-- example
uf: bool -> bool
uf = (and true)

or: bool -> bool -> bool
or false false = false
or _ _ = true

xor: bool -> bool -> bool
xor true false = true
xor false true = true
xor _ _ = false

nand: bool -> bool -> bool
nand a b = not (and a b)
